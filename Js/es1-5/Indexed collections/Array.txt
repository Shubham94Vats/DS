Array
The Array object, as with arrays in other programming languages, enables storing a collection of multiple items under a single variable name, and has members for performing common array operations.

Description
In JavaScript, arrays aren't primitives but are instead Array objects with the following core characteristics:

JavaScript arrays are resizable and can contain a mix of different data types. (When those characteristics are undesirable, use typed arrays instead.)
JavaScript arrays are not associative arrays and so, array elements cannot be accessed using strings as indexes, but must be accessed using integers as indexes.
JavaScript arrays are zero-indexed: the first element of an array is at index 0, the second is at index 1, and so on â€” and the last element is at the value of the array's length property minus 1.
JavaScript array-copy operations create shallow copies. (All standard built-in copy operations with any JavaScript objects create shallow copies, rather than deep copies).

Constructor
Array()
Creates a new Array object.

Static properties
get Array[@@species]
Returns the Array constructor.

=================================================================
Static methods(3)
1.Array.from()
Creates a new Array instance from an array-like object or iterable object.
Array.from('foo');
// [ "f", "o", "o" ]
Array from a Map
const map = new Map([[1, 2], [2, 4], [4, 8]]);
Array.from(map);
// [[1, 2], [2, 4], [4, 8]]

2.Array.isArray()
Returns true if the argument is an array, or false otherwise.
Array.isArray([1, 2, 3]);  // true
Array.isArray({foo: 123}); // false
Array.isArray('foobar');   // false
Array.isArray(undefined);  // false

3.Array.of()
Creates a new Array instance with a variable number of arguments, regardless of number or type of the arguments.
Array.of(1);         // [1]
Array.of(1, 2, 3);   // [1, 2, 3]
Array.of(undefined); // [undefined]

=================================================================
Instance properties
Array.prototype.length
Reflects the number of elements in an array.

Array.prototype[@@unscopables]
Contains property names that were not included in the ECMAScript standard prior to the ES2015 version and that are ignored for with statement-binding purposes.

=================================================================
Instance methods(35)
1.Array.prototype.at()
Returns the array item at the given index. Accepts negative integers, which count back from the last item.
const array1 = [5, 12, 8, 130, 44];
index = 2;
array1.at(index) //8
index = -2;
array1.at(index) //130


2.Array.prototype.concat()
Returns a new array that is the calling array joined with other array(s) and/or value(s).
const array1 = [12,3,"7"];
const array2 = [99,43,2];
const array3 = array1.concat(array2);
// ["a", "b", "c", "d", "e", "f"]


3.Array.prototype.copyWithin()
Copies a sequence of array elements within an array.

4.Array.prototype.entries()
Returns a new array iterator object that contains the key/value pairs for each index in an array.
const array1 = ['a', 'b', 'c'];
const iterator1 = array1.entries();
console.log(iterator1.next().value);
// expected output: Array [0, "a"]
console.log(iterator1.next().value);
// expected output: Array [1, "b"]


5.Array.prototype.every()
Returns true if every element in the calling array satisfies the testing function.
[12, 5, 8, 130, 44].every(x => x >= 10);   // false
[12, 54, 18, 130, 44].every(x => x >= 10); // true

6.Array.prototype.fill()
Fills all the elements of an array from a start index to an end index with a static value.
const array1 = [1, 2, 3, 4];
// fill with 0 from position 2 until position 4
console.log(array1.fill(0, 2, 4));
// expected output: [1, 2, 0, 0]
// fill with 5 from position 1
console.log(array1.fill(5, 1));
// expected output: [1, 5, 5, 5]
console.log(array1.fill(6));
// expected output: [6, 6, 6, 6]


7.Array.prototype.filter()
The filter() method creates a new array with all elements that pass the test implemented by the provided function.
const words = ['spray', 'limit', 'elite', 'exuberant', 'destruction', 'present'];
const result = words.filter(word => word.length > 6);
console.log(result);
// expected output: Array ["exuberant", "destruction", "present"]


8.Array.prototype.find()
The find() method returns the first element in the provided array that satisfies the provided testing function. If no values satisfy the testing function, undefined is returned.
const array1 = [5, 12, 8, 130, 44];
const found = array1.find(element => element > 10);
console.log(found);
// expected output: 12


9.Array.prototype.findIndex()
The findIndex() method returns the index of the first element in the array that satisfies the provided testing function. Otherwise, it returns -1, indicating that no element passed the test.
const array1 = [5, 12, 8, 130, 44];
const isLargeNumber = (element) => element > 13;
console.log(array1.findIndex(isLargeNumber));
// expected output: 3


10.Array.prototype.flat()
The flat() method creates a new array with all sub-array elements concatenated into it recursively up to the specified depth.
const arr1 = [0, 1, 2, [3, 4]];
console.log(arr1.flat());
// expected output: [0, 1, 2, 3, 4]
const arr2 = [0, 1, 2, [[[3, 4]]]];
console.log(arr2.flat(2));
// expected output: [0, 1, 2, [3, 4]]


11.Array.prototype.flatMap()
Returns a new array formed by applying a given callback function to each element of the calling array, and then flattening the result by one level.

12.Array.prototype.forEach()
The forEach() method executes a provided function once for each array element.
const array1 = ['a', 'b', 'c'];
array1.forEach(element => console.log(element));
// expected output: "a"
// expected output: "b"
// expected output: "c"


13.Array.prototype.groupBy() Experimental
Groups the elements of an array into an object according to the strings returned by a test function.

14.Array.prototype.groupByToMap() Experimental
Groups the elements of an array into a Map according to values returned by a test function.


15.Array.prototype.includes()
The includes() method determines whether an array includes a certain value among its entries, returning true or false as appropriate.
const array1 = [1, 2, 3];
console.log(array1.includes(2));
// expected output: true
const pets = ['cat', 'dog', 'bat'];
console.log(pets.includes('cat'));
// expected output: true
console.log(pets.includes('at'));
// expected output: false



16.Array.prototype.indexOf()
Returns the first (least) index at which a given element can be found in the calling array.

17.Array.prototype.join()
Joins all elements of an array into a string.

18.Array.prototype.keys()
Returns a new array iterator that contains the keys for each index in the calling array.

19.Array.prototype.lastIndexOf()
Returns the last (greatest) index at which a given element can be found in the calling array, or -1 if none is found.

20.Array.prototype.map()
Returns a new array containing the results of invoking a function on every element in the calling array.

21.Array.prototype.pop()
Removes the last element from an array and returns that element.

22.Array.prototype.push()
Adds one or more elements to the end of an array, and returns the new length of the array.

23.Array.prototype.reduce()
Executes a user-supplied "reducer" callback function on each element of the array (from left to right), to reduce it to a single value.

24.Array.prototype.reduceRight()
Executes a user-supplied "reducer" callback function on each element of the array (from right to left), to reduce it to a single value.

25.Array.prototype.reverse()
Reverses the order of the elements of an array in place. (First becomes the last, last becomes first.)

26.Array.prototype.shift()
Removes the first element from an array and returns that element.

27.Array.prototype.slice()
Extracts a section of the calling array and returns a new array.

28.Array.prototype.some()
Returns true if at least one element in the calling array satisfies the provided testing function.

29.Array.prototype.sort()
Sorts the elements of an array in place and returns the array.

30.Array.prototype.splice()
Adds and/or removes elements from an array.

31.Array.prototype.toLocaleString()
Returns a localized string representing the calling array and its elements. Overrides the Object.prototype.toLocaleString() method.

32.Array.prototype.toString()
Returns a string representing the calling array and its elements. Overrides the Object.prototype.toString() method.

33.Array.prototype.unshift()
Adds one or more elements to the front of an array, and returns the new length of the array.

34.Array.prototype.values()
Returns a new array iterator object that contains the values for each index in the array.

35.Array.prototype[@@iterator]()
Returns the values() function by default.